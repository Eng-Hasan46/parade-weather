{
  "version": 3,
  "sources": ["../../react-grid-heatmap/src/Cell.tsx", "../../react-grid-heatmap/src/Row.tsx", "../../react-grid-heatmap/src/XLabels.tsx", "../../react-grid-heatmap/src/Column.tsx", "../../react-grid-heatmap/src/YLabels.tsx", "../../react-grid-heatmap/src/YLabelAligner.tsx", "../../react-grid-heatmap/src/useElementHeight.ts", "../../react-grid-heatmap/src/index.tsx"],
  "sourcesContent": ["import React from 'react'\n\ninterface Props {\n  render?: (x: number, y: number, ratio: number) => {}\n  posX: number\n  posY: number\n  style?: (x: number, y: number, ratio: number) => {}\n  ratio: number\n  value: number\n  height?: string\n  square?: boolean\n  onClick?: (x: number, y: number) => void\n}\n\nconst noop = (returnVal: any) => () => returnVal\n\nconst Cell = ({\n  render = noop(null),\n  style = noop({}),\n  ratio,\n  posX,\n  posY,\n  square = false,\n  height = '2rem',\n  value,\n  onClick\n}: Props) => {\n  return (\n    <div\n      onClick={() => (onClick || noop({}))(posX, posY)}\n      style={{\n        border: '1px solid #fff',\n        borderWidth: '1px 1px 0 0',\n        textAlign: 'center',\n        color: `rgb(0, 0, 0, ${ratio / 2 + 0.4})`,\n        overflow: 'hidden',\n        boxSizing: 'border-box',\n        flexGrow: square ? 0 : 1,\n        flexBasis: square ? height : 0,\n        flexShrink: 0,\n        height: height,\n        lineHeight: height,\n        borderRadius: '4px',\n        fontSize: '.8rem',\n        cursor: onClick ? 'pointer' : 'initial',\n        background: `rgb(12, 160, 44, ${ratio + 0.05})`,\n        ...style(posX, posY, ratio)\n      }}\n    >\n      {render(posX, posY, value)}\n    </div>\n  )\n}\n\nexport default React.memo(Cell)\n", "import React from 'react'\n\ninterface Props {\n  children: any\n  reverse?: boolean\n}\n\nexport default function Row({ children, reverse = false }: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: reverse ? 'row-reverse' : 'row',\n        justifyContent: reverse ? 'flex-end' : 'initial'\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n", "import React from 'react'\n\ninterface Props {\n  labels: string[]\n  xLabelsStyle?: (index: number) => {}\n  square?: boolean\n  height: string\n}\n\nexport default function XLabels({\n  labels,\n  xLabelsStyle = () => ({}),\n  height,\n  square = false\n}: Props) {\n  const widthPercent = `${100 / labels.length}%`\n  return (\n    <div style={{ display: 'flex', textAlign: 'center' }}>\n      {labels.map((label, index) => (\n        <div\n          key={`${label}-${index}`}\n          style={{\n            padding: '0.2rem 0',\n            boxSizing: 'border-box',\n            flexGrow: square ? 'initial' : 1,\n            overflow: 'hidden',\n            flexShrink: 1,\n            flexBasis: square ? height : widthPercent,\n            width: square ? height : widthPercent,\n            ...xLabelsStyle(index)\n          }}\n        >\n          {label}\n        </div>\n      ))}\n    </div>\n  )\n}\n", "import React from 'react'\n\ninterface Props {\n  children: any\n  reverse?: boolean\n  grow?: boolean\n}\n\nexport default function Column({\n  children,\n  grow = false,\n  reverse = false\n}: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: reverse ? 'column-reverse' : 'column',\n        flexGrow: grow ? 1 : 0\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n", "import React from 'react'\n\ninterface Props {\n  labels: string[]\n  height: string\n  reverse?: boolean\n  yLabelsStyle?: (index: number) => {}\n}\n\nexport default function YLabels({\n  labels,\n  height,\n  yLabelsStyle = () => ({}),\n  reverse = false\n}: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        textAlign: reverse ? 'left' : 'right'\n      }}\n    >\n      {labels.map((label, index) => (\n        <div\n          key={label}\n          style={{\n            boxSizing: 'border-box',\n            padding: '0 0.2rem',\n            lineHeight: height,\n            ...yLabelsStyle(index)\n          }}\n        >\n          {label}\n        </div>\n      ))}\n    </div>\n  )\n}\n", "import React from 'react'\n\ninterface Props {\n  xLabelHeight: number\n  isXLabelReverse: boolean\n  children: any\n}\n\nexport default function YLabelAligner({\n  xLabelHeight,\n  isXLabelReverse,\n  children\n}: Props) {\n  const style = {\n    [isXLabelReverse ? 'marginBottom' : 'marginTop']: `${xLabelHeight}px`\n  }\n  return <div style={style}>{children}</div>\n}\n", "import React from 'react'\n\ninterface ClientHeight {\n  clientHeight: number\n}\n\nexport default function useElementHeight(\n  initHeight: number\n): [number, React.MutableRefObject<any>] {\n  const eleRef = React.useRef(null)\n  const [eleHeight, setEleHeight] = React.useState<number>(initHeight)\n\n  React.useEffect(() => {\n    if (eleRef.current) {\n      const height = ((eleRef.current || {}) as ClientHeight).clientHeight\n      setEleHeight(height)\n    }\n  }, [])\n\n  return [eleHeight, eleRef]\n}\n", "import * as React from 'react'\nimport Cell from './Cell'\nimport Row from './Row'\nimport XLabels from './XLabels'\nimport Column from './Column'\nimport YLabels from './YLabels'\nimport YLabelAligner from './YLabelAligner'\nimport useElementHeight from './useElementHeight'\n\nexport interface HeatMapGridProps {\n  data: number[][]\n  xLabels?: string[]\n  yLabels?: string[]\n  cellHeight?: string\n  square?: boolean\n  xLabelsPos?: 'top' | 'bottom'\n  yLabelsPos?: 'left' | 'right'\n  xLabelsStyle?: (index: number) => {}\n  yLabelsStyle?: (index: number) => {}\n  cellStyle?: (x: number, y: number, ratio: number) => {}\n  cellRender?: (x: number, y: number, value: number) => {}\n  onClick?: (x: number, y: number) => void\n}\n\nfunction getMinMax(data: number[][]): [number, number] {\n  const flatArray = data.reduce((i, o) => [...o, ...i], [])\n  const max = Math.max(...flatArray)\n  const min = Math.min(...flatArray)\n  return [min, max]\n}\n\nexport const HeatMapGrid = ({\n  data,\n  xLabels,\n  yLabels,\n  xLabelsPos = 'top',\n  yLabelsPos = 'left',\n  square = false,\n  cellHeight = '2px',\n  xLabelsStyle,\n  yLabelsStyle,\n  cellStyle,\n  cellRender,\n  onClick\n}: HeatMapGridProps) => {\n  const [xLabelHeight, xLabelRef] = useElementHeight(22)\n  const [min, max] = getMinMax(data)\n  const minMaxDiff = max - min\n  const isXLabelReverse = xLabelsPos === 'bottom'\n  const isYLabelReverse = yLabelsPos === 'right'\n\n  return (\n    <Row reverse={isYLabelReverse}>\n      {yLabels && (\n        <YLabelAligner\n          xLabelHeight={xLabelHeight}\n          isXLabelReverse={isXLabelReverse}\n        >\n          <YLabels\n            reverse={isYLabelReverse}\n            labels={yLabels}\n            height={cellHeight}\n            yLabelsStyle={yLabelsStyle}\n          />\n        </YLabelAligner>\n      )}\n      <Column reverse={isXLabelReverse} grow={!square}>\n        <div ref={xLabelRef}>\n          {xLabels && (\n            <XLabels\n              labels={xLabels}\n              xLabelsStyle={xLabelsStyle}\n              height={cellHeight}\n              square={square}\n            />\n          )}\n        </div>\n        <Column>\n          {data.map((rowItems, xi) => (\n            <Row key={xi}>\n              {rowItems.map((value, yi) => (\n                <Cell\n                  key={`${xi}-${yi}`}\n                  posX={xi}\n                  posY={yi}\n                  onClick={onClick}\n                  value={value}\n                  height={cellHeight}\n                  square={square}\n                  render={cellRender}\n                  style={cellStyle}\n                  ratio={(value - min) / minMaxDiff}\n                />\n              ))}\n            </Row>\n          ))}\n        </Column>\n      </Column>\n    </Row>\n  )\n}\n"],
  "mappings": "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",
  "names": ["noop", "returnVal", "Cell", "render", "style", "ratio", "posX", "posY", "square", "height", "value", "onClick", "React", "border", "borderWidth", "textAlign", "color", "overflow", "boxSizing", "flexGrow", "flexBasis", "flexShrink", "lineHeight", "borderRadius", "fontSize", "cursor", "background", "memo", "Row", "children", "reverse", "display", "flexDirection", "justifyContent", "XLabels", "labels", "xLabelsStyle", "widthPercent", "length", "map", "label", "index", "padding", "width", "Column", "grow", "YLabels", "yLabelsStyle", "YLabelAligner", "xLabelHeight", "isXLabelReverse", "useElementHeight", "initHeight", "eleRef", "useRef", "useState", "eleHeight", "setEleHeight", "useEffect", "current", "clientHeight", "getMinMax", "data", "flatArray", "reduce", "i", "o", "max", "Math", "min", "HeatMapGrid", "xLabels", "yLabels", "xLabelsPos", "yLabelsPos", "cellHeight", "cellStyle", "cellRender", "xLabelRef", "minMaxDiff", "isYLabelReverse", "React.createElement", "rowItems", "xi", "yi"]
}
